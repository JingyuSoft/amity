/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "refdata.h"

@implementation LocationDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id code: (NSString *) code name: (NSString *) name latitude: (double) latitude longitude: (double) longitude
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
}

- (void) dealloc
{
  [__code release_stub];
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LocationDto"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__code_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'code' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__latitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'latitude' is not set."];
  }
  if (!__longitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'longitude' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LocationDto("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CityDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id code: (NSString *) code name: (NSString *) name latitude: (double) latitude longitude: (double) longitude
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
}

- (void) dealloc
{
  [__code release_stub];
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CityDto"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__code_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'code' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__latitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'latitude' is not set."];
  }
  if (!__longitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'longitude' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CityDto("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation RegionDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id code: (NSString *) code name: (NSString *) name latitude: (double) latitude longitude: (double) longitude
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
}

- (void) dealloc
{
  [__code release_stub];
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"RegionDto"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__code_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'code' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__latitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'latitude' is not set."];
  }
  if (!__longitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'longitude' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"RegionDto("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CountryDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int32_t) id code: (NSString *) code name: (NSString *) name latitude: (double) latitude longitude: (double) longitude
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __code = [code retain_stub];
  __code_isset = YES;
  __name = [name retain_stub];
  __name_isset = YES;
  __latitude = latitude;
  __latitude_isset = YES;
  __longitude = longitude;
  __longitude_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt32ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"code"])
  {
    __code = [[decoder decodeObjectForKey: @"code"] retain_stub];
    __code_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain_stub];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"latitude"])
  {
    __latitude = [decoder decodeDoubleForKey: @"latitude"];
    __latitude_isset = YES;
  }
  if ([decoder containsValueForKey: @"longitude"])
  {
    __longitude = [decoder decodeDoubleForKey: @"longitude"];
    __longitude_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt32: __id forKey: @"id"];
  }
  if (__code_isset)
  {
    [encoder encodeObject: __code forKey: @"code"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__latitude_isset)
  {
    [encoder encodeDouble: __latitude forKey: @"latitude"];
  }
  if (__longitude_isset)
  {
    [encoder encodeDouble: __longitude forKey: @"longitude"];
  }
}

- (void) dealloc
{
  [__code release_stub];
  [__name release_stub];
  [super dealloc_stub];
}

- (int32_t) id {
  return __id;
}

- (void) setId: (int32_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (NSString *) code {
  return [[__code retain_stub] autorelease_stub];
}

- (void) setCode: (NSString *) code {
  [code retain_stub];
  [__code release_stub];
  __code = code;
  __code_isset = YES;
}

- (BOOL) codeIsSet {
  return __code_isset;
}

- (void) unsetCode {
  [__code release_stub];
  __code = nil;
  __code_isset = NO;
}

- (NSString *) name {
  return [[__name retain_stub] autorelease_stub];
}

- (void) setName: (NSString *) name {
  [name retain_stub];
  [__name release_stub];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release_stub];
  __name = nil;
  __name_isset = NO;
}

- (double) latitude {
  return __latitude;
}

- (void) setLatitude: (double) latitude {
  __latitude = latitude;
  __latitude_isset = YES;
}

- (BOOL) latitudeIsSet {
  return __latitude_isset;
}

- (void) unsetLatitude {
  __latitude_isset = NO;
}

- (double) longitude {
  return __longitude;
}

- (void) setLongitude: (double) longitude {
  __longitude = longitude;
  __longitude_isset = YES;
}

- (BOOL) longitudeIsSet {
  return __longitude_isset;
}

- (void) unsetLongitude {
  __longitude_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLatitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_DOUBLE) {
          double fieldValue = [inProtocol readDouble];
          [self setLongitude: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CountryDto"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __id];
    [outProtocol writeFieldEnd];
  }
  if (__code_isset) {
    if (__code != nil) {
      [outProtocol writeFieldBeginWithName: @"code" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __code];
      [outProtocol writeFieldEnd];
    }
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__latitude_isset) {
    [outProtocol writeFieldBeginWithName: @"latitude" type: TType_DOUBLE fieldID: 4];
    [outProtocol writeDouble: __latitude];
    [outProtocol writeFieldEnd];
  }
  if (__longitude_isset) {
    [outProtocol writeFieldBeginWithName: @"longitude" type: TType_DOUBLE fieldID: 5];
    [outProtocol writeDouble: __longitude];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__id_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'id' is not set."];
  }
  if (!__code_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'code' is not set."];
  }
  if (!__name_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'name' is not set."];
  }
  if (!__latitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'latitude' is not set."];
  }
  if (!__longitude_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'longitude' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CountryDto("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%i", __id];
  [ms appendString: @",code:"];
  [ms appendFormat: @"\"%@\"", __code];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",latitude:"];
  [ms appendFormat: @"%f", __latitude];
  [ms appendString: @",longitude:"];
  [ms appendFormat: @"%f", __longitude];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation refdataConstants
+ (void) initialize {
}
@end

@implementation RefDataThriftServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

@end

@implementation RefDataThriftServiceProcessor

- (id) initWithRefDataThriftService: (id <RefDataThriftService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  return self;
}

- (id<RefDataThriftService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

