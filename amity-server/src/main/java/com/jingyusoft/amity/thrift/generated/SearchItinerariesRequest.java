/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.jingyusoft.amity.thrift.generated;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2015-1-3")
public class SearchItinerariesRequest implements org.apache.thrift.TBase<SearchItinerariesRequest, SearchItinerariesRequest._Fields>, java.io.Serializable, Cloneable, Comparable<SearchItinerariesRequest> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SearchItinerariesRequest");

  private static final org.apache.thrift.protocol.TField DEPARTURE_CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("departureCityId", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField DEPARTURE_LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("departureLatitude", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField DEPARTURE_LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("departureLongitude", org.apache.thrift.protocol.TType.DOUBLE, (short)3);
  private static final org.apache.thrift.protocol.TField ARRIVAL_CITY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("arrivalCityId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField ARRIVAL_LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("arrivalLatitude", org.apache.thrift.protocol.TType.DOUBLE, (short)5);
  private static final org.apache.thrift.protocol.TField ARRIVAL_LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField("arrivalLongitude", org.apache.thrift.protocol.TType.DOUBLE, (short)6);
  private static final org.apache.thrift.protocol.TField DEPARTURE_SEARCH_RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("departureSearchRadius", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField ARRIVAL_SEARCH_RADIUS_FIELD_DESC = new org.apache.thrift.protocol.TField("arrivalSearchRadius", org.apache.thrift.protocol.TType.DOUBLE, (short)8);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new SearchItinerariesRequestStandardSchemeFactory());
    schemes.put(TupleScheme.class, new SearchItinerariesRequestTupleSchemeFactory());
  }

  public int departureCityId; // optional
  public double departureLatitude; // optional
  public double departureLongitude; // optional
  public int arrivalCityId; // optional
  public double arrivalLatitude; // optional
  public double arrivalLongitude; // optional
  public double departureSearchRadius; // optional
  public double arrivalSearchRadius; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DEPARTURE_CITY_ID((short)1, "departureCityId"),
    DEPARTURE_LATITUDE((short)2, "departureLatitude"),
    DEPARTURE_LONGITUDE((short)3, "departureLongitude"),
    ARRIVAL_CITY_ID((short)4, "arrivalCityId"),
    ARRIVAL_LATITUDE((short)5, "arrivalLatitude"),
    ARRIVAL_LONGITUDE((short)6, "arrivalLongitude"),
    DEPARTURE_SEARCH_RADIUS((short)7, "departureSearchRadius"),
    ARRIVAL_SEARCH_RADIUS((short)8, "arrivalSearchRadius");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DEPARTURE_CITY_ID
          return DEPARTURE_CITY_ID;
        case 2: // DEPARTURE_LATITUDE
          return DEPARTURE_LATITUDE;
        case 3: // DEPARTURE_LONGITUDE
          return DEPARTURE_LONGITUDE;
        case 4: // ARRIVAL_CITY_ID
          return ARRIVAL_CITY_ID;
        case 5: // ARRIVAL_LATITUDE
          return ARRIVAL_LATITUDE;
        case 6: // ARRIVAL_LONGITUDE
          return ARRIVAL_LONGITUDE;
        case 7: // DEPARTURE_SEARCH_RADIUS
          return DEPARTURE_SEARCH_RADIUS;
        case 8: // ARRIVAL_SEARCH_RADIUS
          return ARRIVAL_SEARCH_RADIUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __DEPARTURECITYID_ISSET_ID = 0;
  private static final int __DEPARTURELATITUDE_ISSET_ID = 1;
  private static final int __DEPARTURELONGITUDE_ISSET_ID = 2;
  private static final int __ARRIVALCITYID_ISSET_ID = 3;
  private static final int __ARRIVALLATITUDE_ISSET_ID = 4;
  private static final int __ARRIVALLONGITUDE_ISSET_ID = 5;
  private static final int __DEPARTURESEARCHRADIUS_ISSET_ID = 6;
  private static final int __ARRIVALSEARCHRADIUS_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DEPARTURE_CITY_ID,_Fields.DEPARTURE_LATITUDE,_Fields.DEPARTURE_LONGITUDE,_Fields.ARRIVAL_CITY_ID,_Fields.ARRIVAL_LATITUDE,_Fields.ARRIVAL_LONGITUDE,_Fields.DEPARTURE_SEARCH_RADIUS,_Fields.ARRIVAL_SEARCH_RADIUS};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DEPARTURE_CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("departureCityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DEPARTURE_LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("departureLatitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEPARTURE_LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("departureLongitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ARRIVAL_CITY_ID, new org.apache.thrift.meta_data.FieldMetaData("arrivalCityId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.ARRIVAL_LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("arrivalLatitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ARRIVAL_LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("arrivalLongitude", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.DEPARTURE_SEARCH_RADIUS, new org.apache.thrift.meta_data.FieldMetaData("departureSearchRadius", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.ARRIVAL_SEARCH_RADIUS, new org.apache.thrift.meta_data.FieldMetaData("arrivalSearchRadius", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SearchItinerariesRequest.class, metaDataMap);
  }

  public SearchItinerariesRequest() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SearchItinerariesRequest(SearchItinerariesRequest other) {
    __isset_bitfield = other.__isset_bitfield;
    this.departureCityId = other.departureCityId;
    this.departureLatitude = other.departureLatitude;
    this.departureLongitude = other.departureLongitude;
    this.arrivalCityId = other.arrivalCityId;
    this.arrivalLatitude = other.arrivalLatitude;
    this.arrivalLongitude = other.arrivalLongitude;
    this.departureSearchRadius = other.departureSearchRadius;
    this.arrivalSearchRadius = other.arrivalSearchRadius;
  }

  public SearchItinerariesRequest deepCopy() {
    return new SearchItinerariesRequest(this);
  }

  @Override
  public void clear() {
    setDepartureCityIdIsSet(false);
    this.departureCityId = 0;
    setDepartureLatitudeIsSet(false);
    this.departureLatitude = 0.0;
    setDepartureLongitudeIsSet(false);
    this.departureLongitude = 0.0;
    setArrivalCityIdIsSet(false);
    this.arrivalCityId = 0;
    setArrivalLatitudeIsSet(false);
    this.arrivalLatitude = 0.0;
    setArrivalLongitudeIsSet(false);
    this.arrivalLongitude = 0.0;
    setDepartureSearchRadiusIsSet(false);
    this.departureSearchRadius = 0.0;
    setArrivalSearchRadiusIsSet(false);
    this.arrivalSearchRadius = 0.0;
  }

  public int getDepartureCityId() {
    return this.departureCityId;
  }

  public SearchItinerariesRequest setDepartureCityId(int departureCityId) {
    this.departureCityId = departureCityId;
    setDepartureCityIdIsSet(true);
    return this;
  }

  public void unsetDepartureCityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTURECITYID_ISSET_ID);
  }

  /** Returns true if field departureCityId is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartureCityId() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTURECITYID_ISSET_ID);
  }

  public void setDepartureCityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTURECITYID_ISSET_ID, value);
  }

  public double getDepartureLatitude() {
    return this.departureLatitude;
  }

  public SearchItinerariesRequest setDepartureLatitude(double departureLatitude) {
    this.departureLatitude = departureLatitude;
    setDepartureLatitudeIsSet(true);
    return this;
  }

  public void unsetDepartureLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTURELATITUDE_ISSET_ID);
  }

  /** Returns true if field departureLatitude is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartureLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTURELATITUDE_ISSET_ID);
  }

  public void setDepartureLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTURELATITUDE_ISSET_ID, value);
  }

  public double getDepartureLongitude() {
    return this.departureLongitude;
  }

  public SearchItinerariesRequest setDepartureLongitude(double departureLongitude) {
    this.departureLongitude = departureLongitude;
    setDepartureLongitudeIsSet(true);
    return this;
  }

  public void unsetDepartureLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTURELONGITUDE_ISSET_ID);
  }

  /** Returns true if field departureLongitude is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartureLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTURELONGITUDE_ISSET_ID);
  }

  public void setDepartureLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTURELONGITUDE_ISSET_ID, value);
  }

  public int getArrivalCityId() {
    return this.arrivalCityId;
  }

  public SearchItinerariesRequest setArrivalCityId(int arrivalCityId) {
    this.arrivalCityId = arrivalCityId;
    setArrivalCityIdIsSet(true);
    return this;
  }

  public void unsetArrivalCityId() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARRIVALCITYID_ISSET_ID);
  }

  /** Returns true if field arrivalCityId is set (has been assigned a value) and false otherwise */
  public boolean isSetArrivalCityId() {
    return EncodingUtils.testBit(__isset_bitfield, __ARRIVALCITYID_ISSET_ID);
  }

  public void setArrivalCityIdIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARRIVALCITYID_ISSET_ID, value);
  }

  public double getArrivalLatitude() {
    return this.arrivalLatitude;
  }

  public SearchItinerariesRequest setArrivalLatitude(double arrivalLatitude) {
    this.arrivalLatitude = arrivalLatitude;
    setArrivalLatitudeIsSet(true);
    return this;
  }

  public void unsetArrivalLatitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARRIVALLATITUDE_ISSET_ID);
  }

  /** Returns true if field arrivalLatitude is set (has been assigned a value) and false otherwise */
  public boolean isSetArrivalLatitude() {
    return EncodingUtils.testBit(__isset_bitfield, __ARRIVALLATITUDE_ISSET_ID);
  }

  public void setArrivalLatitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARRIVALLATITUDE_ISSET_ID, value);
  }

  public double getArrivalLongitude() {
    return this.arrivalLongitude;
  }

  public SearchItinerariesRequest setArrivalLongitude(double arrivalLongitude) {
    this.arrivalLongitude = arrivalLongitude;
    setArrivalLongitudeIsSet(true);
    return this;
  }

  public void unsetArrivalLongitude() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARRIVALLONGITUDE_ISSET_ID);
  }

  /** Returns true if field arrivalLongitude is set (has been assigned a value) and false otherwise */
  public boolean isSetArrivalLongitude() {
    return EncodingUtils.testBit(__isset_bitfield, __ARRIVALLONGITUDE_ISSET_ID);
  }

  public void setArrivalLongitudeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARRIVALLONGITUDE_ISSET_ID, value);
  }

  public double getDepartureSearchRadius() {
    return this.departureSearchRadius;
  }

  public SearchItinerariesRequest setDepartureSearchRadius(double departureSearchRadius) {
    this.departureSearchRadius = departureSearchRadius;
    setDepartureSearchRadiusIsSet(true);
    return this;
  }

  public void unsetDepartureSearchRadius() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DEPARTURESEARCHRADIUS_ISSET_ID);
  }

  /** Returns true if field departureSearchRadius is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartureSearchRadius() {
    return EncodingUtils.testBit(__isset_bitfield, __DEPARTURESEARCHRADIUS_ISSET_ID);
  }

  public void setDepartureSearchRadiusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DEPARTURESEARCHRADIUS_ISSET_ID, value);
  }

  public double getArrivalSearchRadius() {
    return this.arrivalSearchRadius;
  }

  public SearchItinerariesRequest setArrivalSearchRadius(double arrivalSearchRadius) {
    this.arrivalSearchRadius = arrivalSearchRadius;
    setArrivalSearchRadiusIsSet(true);
    return this;
  }

  public void unsetArrivalSearchRadius() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ARRIVALSEARCHRADIUS_ISSET_ID);
  }

  /** Returns true if field arrivalSearchRadius is set (has been assigned a value) and false otherwise */
  public boolean isSetArrivalSearchRadius() {
    return EncodingUtils.testBit(__isset_bitfield, __ARRIVALSEARCHRADIUS_ISSET_ID);
  }

  public void setArrivalSearchRadiusIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ARRIVALSEARCHRADIUS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DEPARTURE_CITY_ID:
      if (value == null) {
        unsetDepartureCityId();
      } else {
        setDepartureCityId((Integer)value);
      }
      break;

    case DEPARTURE_LATITUDE:
      if (value == null) {
        unsetDepartureLatitude();
      } else {
        setDepartureLatitude((Double)value);
      }
      break;

    case DEPARTURE_LONGITUDE:
      if (value == null) {
        unsetDepartureLongitude();
      } else {
        setDepartureLongitude((Double)value);
      }
      break;

    case ARRIVAL_CITY_ID:
      if (value == null) {
        unsetArrivalCityId();
      } else {
        setArrivalCityId((Integer)value);
      }
      break;

    case ARRIVAL_LATITUDE:
      if (value == null) {
        unsetArrivalLatitude();
      } else {
        setArrivalLatitude((Double)value);
      }
      break;

    case ARRIVAL_LONGITUDE:
      if (value == null) {
        unsetArrivalLongitude();
      } else {
        setArrivalLongitude((Double)value);
      }
      break;

    case DEPARTURE_SEARCH_RADIUS:
      if (value == null) {
        unsetDepartureSearchRadius();
      } else {
        setDepartureSearchRadius((Double)value);
      }
      break;

    case ARRIVAL_SEARCH_RADIUS:
      if (value == null) {
        unsetArrivalSearchRadius();
      } else {
        setArrivalSearchRadius((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DEPARTURE_CITY_ID:
      return Integer.valueOf(getDepartureCityId());

    case DEPARTURE_LATITUDE:
      return Double.valueOf(getDepartureLatitude());

    case DEPARTURE_LONGITUDE:
      return Double.valueOf(getDepartureLongitude());

    case ARRIVAL_CITY_ID:
      return Integer.valueOf(getArrivalCityId());

    case ARRIVAL_LATITUDE:
      return Double.valueOf(getArrivalLatitude());

    case ARRIVAL_LONGITUDE:
      return Double.valueOf(getArrivalLongitude());

    case DEPARTURE_SEARCH_RADIUS:
      return Double.valueOf(getDepartureSearchRadius());

    case ARRIVAL_SEARCH_RADIUS:
      return Double.valueOf(getArrivalSearchRadius());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DEPARTURE_CITY_ID:
      return isSetDepartureCityId();
    case DEPARTURE_LATITUDE:
      return isSetDepartureLatitude();
    case DEPARTURE_LONGITUDE:
      return isSetDepartureLongitude();
    case ARRIVAL_CITY_ID:
      return isSetArrivalCityId();
    case ARRIVAL_LATITUDE:
      return isSetArrivalLatitude();
    case ARRIVAL_LONGITUDE:
      return isSetArrivalLongitude();
    case DEPARTURE_SEARCH_RADIUS:
      return isSetDepartureSearchRadius();
    case ARRIVAL_SEARCH_RADIUS:
      return isSetArrivalSearchRadius();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof SearchItinerariesRequest)
      return this.equals((SearchItinerariesRequest)that);
    return false;
  }

  public boolean equals(SearchItinerariesRequest that) {
    if (that == null)
      return false;

    boolean this_present_departureCityId = true && this.isSetDepartureCityId();
    boolean that_present_departureCityId = true && that.isSetDepartureCityId();
    if (this_present_departureCityId || that_present_departureCityId) {
      if (!(this_present_departureCityId && that_present_departureCityId))
        return false;
      if (this.departureCityId != that.departureCityId)
        return false;
    }

    boolean this_present_departureLatitude = true && this.isSetDepartureLatitude();
    boolean that_present_departureLatitude = true && that.isSetDepartureLatitude();
    if (this_present_departureLatitude || that_present_departureLatitude) {
      if (!(this_present_departureLatitude && that_present_departureLatitude))
        return false;
      if (this.departureLatitude != that.departureLatitude)
        return false;
    }

    boolean this_present_departureLongitude = true && this.isSetDepartureLongitude();
    boolean that_present_departureLongitude = true && that.isSetDepartureLongitude();
    if (this_present_departureLongitude || that_present_departureLongitude) {
      if (!(this_present_departureLongitude && that_present_departureLongitude))
        return false;
      if (this.departureLongitude != that.departureLongitude)
        return false;
    }

    boolean this_present_arrivalCityId = true && this.isSetArrivalCityId();
    boolean that_present_arrivalCityId = true && that.isSetArrivalCityId();
    if (this_present_arrivalCityId || that_present_arrivalCityId) {
      if (!(this_present_arrivalCityId && that_present_arrivalCityId))
        return false;
      if (this.arrivalCityId != that.arrivalCityId)
        return false;
    }

    boolean this_present_arrivalLatitude = true && this.isSetArrivalLatitude();
    boolean that_present_arrivalLatitude = true && that.isSetArrivalLatitude();
    if (this_present_arrivalLatitude || that_present_arrivalLatitude) {
      if (!(this_present_arrivalLatitude && that_present_arrivalLatitude))
        return false;
      if (this.arrivalLatitude != that.arrivalLatitude)
        return false;
    }

    boolean this_present_arrivalLongitude = true && this.isSetArrivalLongitude();
    boolean that_present_arrivalLongitude = true && that.isSetArrivalLongitude();
    if (this_present_arrivalLongitude || that_present_arrivalLongitude) {
      if (!(this_present_arrivalLongitude && that_present_arrivalLongitude))
        return false;
      if (this.arrivalLongitude != that.arrivalLongitude)
        return false;
    }

    boolean this_present_departureSearchRadius = true && this.isSetDepartureSearchRadius();
    boolean that_present_departureSearchRadius = true && that.isSetDepartureSearchRadius();
    if (this_present_departureSearchRadius || that_present_departureSearchRadius) {
      if (!(this_present_departureSearchRadius && that_present_departureSearchRadius))
        return false;
      if (this.departureSearchRadius != that.departureSearchRadius)
        return false;
    }

    boolean this_present_arrivalSearchRadius = true && this.isSetArrivalSearchRadius();
    boolean that_present_arrivalSearchRadius = true && that.isSetArrivalSearchRadius();
    if (this_present_arrivalSearchRadius || that_present_arrivalSearchRadius) {
      if (!(this_present_arrivalSearchRadius && that_present_arrivalSearchRadius))
        return false;
      if (this.arrivalSearchRadius != that.arrivalSearchRadius)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_departureCityId = true && (isSetDepartureCityId());
    list.add(present_departureCityId);
    if (present_departureCityId)
      list.add(departureCityId);

    boolean present_departureLatitude = true && (isSetDepartureLatitude());
    list.add(present_departureLatitude);
    if (present_departureLatitude)
      list.add(departureLatitude);

    boolean present_departureLongitude = true && (isSetDepartureLongitude());
    list.add(present_departureLongitude);
    if (present_departureLongitude)
      list.add(departureLongitude);

    boolean present_arrivalCityId = true && (isSetArrivalCityId());
    list.add(present_arrivalCityId);
    if (present_arrivalCityId)
      list.add(arrivalCityId);

    boolean present_arrivalLatitude = true && (isSetArrivalLatitude());
    list.add(present_arrivalLatitude);
    if (present_arrivalLatitude)
      list.add(arrivalLatitude);

    boolean present_arrivalLongitude = true && (isSetArrivalLongitude());
    list.add(present_arrivalLongitude);
    if (present_arrivalLongitude)
      list.add(arrivalLongitude);

    boolean present_departureSearchRadius = true && (isSetDepartureSearchRadius());
    list.add(present_departureSearchRadius);
    if (present_departureSearchRadius)
      list.add(departureSearchRadius);

    boolean present_arrivalSearchRadius = true && (isSetArrivalSearchRadius());
    list.add(present_arrivalSearchRadius);
    if (present_arrivalSearchRadius)
      list.add(arrivalSearchRadius);

    return list.hashCode();
  }

  @Override
  public int compareTo(SearchItinerariesRequest other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetDepartureCityId()).compareTo(other.isSetDepartureCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartureCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departureCityId, other.departureCityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartureLatitude()).compareTo(other.isSetDepartureLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartureLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departureLatitude, other.departureLatitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartureLongitude()).compareTo(other.isSetDepartureLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartureLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departureLongitude, other.departureLongitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrivalCityId()).compareTo(other.isSetArrivalCityId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrivalCityId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrivalCityId, other.arrivalCityId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrivalLatitude()).compareTo(other.isSetArrivalLatitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrivalLatitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrivalLatitude, other.arrivalLatitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrivalLongitude()).compareTo(other.isSetArrivalLongitude());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrivalLongitude()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrivalLongitude, other.arrivalLongitude);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDepartureSearchRadius()).compareTo(other.isSetDepartureSearchRadius());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartureSearchRadius()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.departureSearchRadius, other.departureSearchRadius);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetArrivalSearchRadius()).compareTo(other.isSetArrivalSearchRadius());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArrivalSearchRadius()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arrivalSearchRadius, other.arrivalSearchRadius);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("SearchItinerariesRequest(");
    boolean first = true;

    if (isSetDepartureCityId()) {
      sb.append("departureCityId:");
      sb.append(this.departureCityId);
      first = false;
    }
    if (isSetDepartureLatitude()) {
      if (!first) sb.append(", ");
      sb.append("departureLatitude:");
      sb.append(this.departureLatitude);
      first = false;
    }
    if (isSetDepartureLongitude()) {
      if (!first) sb.append(", ");
      sb.append("departureLongitude:");
      sb.append(this.departureLongitude);
      first = false;
    }
    if (isSetArrivalCityId()) {
      if (!first) sb.append(", ");
      sb.append("arrivalCityId:");
      sb.append(this.arrivalCityId);
      first = false;
    }
    if (isSetArrivalLatitude()) {
      if (!first) sb.append(", ");
      sb.append("arrivalLatitude:");
      sb.append(this.arrivalLatitude);
      first = false;
    }
    if (isSetArrivalLongitude()) {
      if (!first) sb.append(", ");
      sb.append("arrivalLongitude:");
      sb.append(this.arrivalLongitude);
      first = false;
    }
    if (isSetDepartureSearchRadius()) {
      if (!first) sb.append(", ");
      sb.append("departureSearchRadius:");
      sb.append(this.departureSearchRadius);
      first = false;
    }
    if (isSetArrivalSearchRadius()) {
      if (!first) sb.append(", ");
      sb.append("arrivalSearchRadius:");
      sb.append(this.arrivalSearchRadius);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SearchItinerariesRequestStandardSchemeFactory implements SchemeFactory {
    public SearchItinerariesRequestStandardScheme getScheme() {
      return new SearchItinerariesRequestStandardScheme();
    }
  }

  private static class SearchItinerariesRequestStandardScheme extends StandardScheme<SearchItinerariesRequest> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SearchItinerariesRequest struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DEPARTURE_CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.departureCityId = iprot.readI32();
              struct.setDepartureCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // DEPARTURE_LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.departureLatitude = iprot.readDouble();
              struct.setDepartureLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DEPARTURE_LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.departureLongitude = iprot.readDouble();
              struct.setDepartureLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ARRIVAL_CITY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.arrivalCityId = iprot.readI32();
              struct.setArrivalCityIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ARRIVAL_LATITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.arrivalLatitude = iprot.readDouble();
              struct.setArrivalLatitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ARRIVAL_LONGITUDE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.arrivalLongitude = iprot.readDouble();
              struct.setArrivalLongitudeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEPARTURE_SEARCH_RADIUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.departureSearchRadius = iprot.readDouble();
              struct.setDepartureSearchRadiusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ARRIVAL_SEARCH_RADIUS
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.arrivalSearchRadius = iprot.readDouble();
              struct.setArrivalSearchRadiusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SearchItinerariesRequest struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetDepartureCityId()) {
        oprot.writeFieldBegin(DEPARTURE_CITY_ID_FIELD_DESC);
        oprot.writeI32(struct.departureCityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepartureLatitude()) {
        oprot.writeFieldBegin(DEPARTURE_LATITUDE_FIELD_DESC);
        oprot.writeDouble(struct.departureLatitude);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepartureLongitude()) {
        oprot.writeFieldBegin(DEPARTURE_LONGITUDE_FIELD_DESC);
        oprot.writeDouble(struct.departureLongitude);
        oprot.writeFieldEnd();
      }
      if (struct.isSetArrivalCityId()) {
        oprot.writeFieldBegin(ARRIVAL_CITY_ID_FIELD_DESC);
        oprot.writeI32(struct.arrivalCityId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetArrivalLatitude()) {
        oprot.writeFieldBegin(ARRIVAL_LATITUDE_FIELD_DESC);
        oprot.writeDouble(struct.arrivalLatitude);
        oprot.writeFieldEnd();
      }
      if (struct.isSetArrivalLongitude()) {
        oprot.writeFieldBegin(ARRIVAL_LONGITUDE_FIELD_DESC);
        oprot.writeDouble(struct.arrivalLongitude);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDepartureSearchRadius()) {
        oprot.writeFieldBegin(DEPARTURE_SEARCH_RADIUS_FIELD_DESC);
        oprot.writeDouble(struct.departureSearchRadius);
        oprot.writeFieldEnd();
      }
      if (struct.isSetArrivalSearchRadius()) {
        oprot.writeFieldBegin(ARRIVAL_SEARCH_RADIUS_FIELD_DESC);
        oprot.writeDouble(struct.arrivalSearchRadius);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SearchItinerariesRequestTupleSchemeFactory implements SchemeFactory {
    public SearchItinerariesRequestTupleScheme getScheme() {
      return new SearchItinerariesRequestTupleScheme();
    }
  }

  private static class SearchItinerariesRequestTupleScheme extends TupleScheme<SearchItinerariesRequest> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SearchItinerariesRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetDepartureCityId()) {
        optionals.set(0);
      }
      if (struct.isSetDepartureLatitude()) {
        optionals.set(1);
      }
      if (struct.isSetDepartureLongitude()) {
        optionals.set(2);
      }
      if (struct.isSetArrivalCityId()) {
        optionals.set(3);
      }
      if (struct.isSetArrivalLatitude()) {
        optionals.set(4);
      }
      if (struct.isSetArrivalLongitude()) {
        optionals.set(5);
      }
      if (struct.isSetDepartureSearchRadius()) {
        optionals.set(6);
      }
      if (struct.isSetArrivalSearchRadius()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetDepartureCityId()) {
        oprot.writeI32(struct.departureCityId);
      }
      if (struct.isSetDepartureLatitude()) {
        oprot.writeDouble(struct.departureLatitude);
      }
      if (struct.isSetDepartureLongitude()) {
        oprot.writeDouble(struct.departureLongitude);
      }
      if (struct.isSetArrivalCityId()) {
        oprot.writeI32(struct.arrivalCityId);
      }
      if (struct.isSetArrivalLatitude()) {
        oprot.writeDouble(struct.arrivalLatitude);
      }
      if (struct.isSetArrivalLongitude()) {
        oprot.writeDouble(struct.arrivalLongitude);
      }
      if (struct.isSetDepartureSearchRadius()) {
        oprot.writeDouble(struct.departureSearchRadius);
      }
      if (struct.isSetArrivalSearchRadius()) {
        oprot.writeDouble(struct.arrivalSearchRadius);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SearchItinerariesRequest struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.departureCityId = iprot.readI32();
        struct.setDepartureCityIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.departureLatitude = iprot.readDouble();
        struct.setDepartureLatitudeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.departureLongitude = iprot.readDouble();
        struct.setDepartureLongitudeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.arrivalCityId = iprot.readI32();
        struct.setArrivalCityIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.arrivalLatitude = iprot.readDouble();
        struct.setArrivalLatitudeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.arrivalLongitude = iprot.readDouble();
        struct.setArrivalLongitudeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.departureSearchRadius = iprot.readDouble();
        struct.setDepartureSearchRadiusIsSet(true);
      }
      if (incoming.get(7)) {
        struct.arrivalSearchRadius = iprot.readDouble();
        struct.setArrivalSearchRadiusIsSet(true);
      }
    }
  }

}

