/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"


#import "authentication.h"

@implementation AmityToken

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithValue: (NSString *) value
{
  self = [super init];
  __value = [value retain_stub];
  __value_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"value"])
  {
    __value = [[decoder decodeObjectForKey: @"value"] retain_stub];
    __value_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__value_isset)
  {
    [encoder encodeObject: __value forKey: @"value"];
  }
}

- (void) dealloc
{
  [__value release_stub];
  [super dealloc_stub];
}

- (NSString *) value {
  return [[__value retain_stub] autorelease_stub];
}

- (void) setValue: (NSString *) value {
  [value retain_stub];
  [__value release_stub];
  __value = value;
  __value_isset = YES;
}

- (BOOL) valueIsSet {
  return __value_isset;
}

- (void) unsetValue {
  [__value release_stub];
  __value = nil;
  __value_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setValue: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AmityToken"];
  if (__value_isset) {
    if (__value != nil) {
      [outProtocol writeFieldBeginWithName: @"value" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __value];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__value_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'value' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AmityToken("];
  [ms appendString: @"value:"];
  [ms appendFormat: @"\"%@\"", __value];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SessionCredentials

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAmityUserId: (int64_t) amityUserId sessionToken: (AmityToken *) sessionToken
{
  self = [super init];
  __amityUserId = amityUserId;
  __amityUserId_isset = YES;
  __sessionToken = [sessionToken retain_stub];
  __sessionToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"amityUserId"])
  {
    __amityUserId = [decoder decodeInt64ForKey: @"amityUserId"];
    __amityUserId_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionToken"])
  {
    __sessionToken = [[decoder decodeObjectForKey: @"sessionToken"] retain_stub];
    __sessionToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__amityUserId_isset)
  {
    [encoder encodeInt64: __amityUserId forKey: @"amityUserId"];
  }
  if (__sessionToken_isset)
  {
    [encoder encodeObject: __sessionToken forKey: @"sessionToken"];
  }
}

- (void) dealloc
{
  [__sessionToken release_stub];
  [super dealloc_stub];
}

- (int64_t) amityUserId {
  return __amityUserId;
}

- (void) setAmityUserId: (int64_t) amityUserId {
  __amityUserId = amityUserId;
  __amityUserId_isset = YES;
}

- (BOOL) amityUserIdIsSet {
  return __amityUserId_isset;
}

- (void) unsetAmityUserId {
  __amityUserId_isset = NO;
}

- (AmityToken *) sessionToken {
  return [[__sessionToken retain_stub] autorelease_stub];
}

- (void) setSessionToken: (AmityToken *) sessionToken {
  [sessionToken retain_stub];
  [__sessionToken release_stub];
  __sessionToken = sessionToken;
  __sessionToken_isset = YES;
}

- (BOOL) sessionTokenIsSet {
  return __sessionToken_isset;
}

- (void) unsetSessionToken {
  [__sessionToken release_stub];
  __sessionToken = nil;
  __sessionToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAmityUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AmityToken *fieldValue = [[AmityToken alloc] init];
          [fieldValue read: inProtocol];
          [self setSessionToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"SessionCredentials"];
  if (__amityUserId_isset) {
    [outProtocol writeFieldBeginWithName: @"amityUserId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __amityUserId];
    [outProtocol writeFieldEnd];
  }
  if (__sessionToken_isset) {
    if (__sessionToken != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionToken" type: TType_STRUCT fieldID: 2];
      [__sessionToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__amityUserId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'amityUserId' is not set."];
  }
  if (!__sessionToken_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'sessionToken' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"SessionCredentials("];
  [ms appendString: @"amityUserId:"];
  [ms appendFormat: @"%qi", __amityUserId];
  [ms appendString: @",sessionToken:"];
  [ms appendFormat: @"%@", __sessionToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginFacebookAccountRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithFacebookToken: (NSString *) facebookToken
{
  self = [super init];
  __facebookToken = [facebookToken retain_stub];
  __facebookToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"facebookToken"])
  {
    __facebookToken = [[decoder decodeObjectForKey: @"facebookToken"] retain_stub];
    __facebookToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__facebookToken_isset)
  {
    [encoder encodeObject: __facebookToken forKey: @"facebookToken"];
  }
}

- (void) dealloc
{
  [__facebookToken release_stub];
  [super dealloc_stub];
}

- (NSString *) facebookToken {
  return [[__facebookToken retain_stub] autorelease_stub];
}

- (void) setFacebookToken: (NSString *) facebookToken {
  [facebookToken retain_stub];
  [__facebookToken release_stub];
  __facebookToken = facebookToken;
  __facebookToken_isset = YES;
}

- (BOOL) facebookTokenIsSet {
  return __facebookToken_isset;
}

- (void) unsetFacebookToken {
  [__facebookToken release_stub];
  __facebookToken = nil;
  __facebookToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFacebookToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginFacebookAccountRequest"];
  if (__facebookToken_isset) {
    if (__facebookToken != nil) {
      [outProtocol writeFieldBeginWithName: @"facebookToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __facebookToken];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__facebookToken_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'facebookToken' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginFacebookAccountRequest("];
  [ms appendString: @"facebookToken:"];
  [ms appendFormat: @"\"%@\"", __facebookToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AmityUserDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAmityUserId: (int64_t) amityUserId userType: (NSString *) userType username: (NSString *) username firstName: (NSString *) firstName lastName: (NSString *) lastName emailAddress: (NSString *) emailAddress gender: (NSString *) gender userAlias: (NSString *) userAlias avatar: (NSData *) avatar
{
  self = [super init];
  __amityUserId = amityUserId;
  __amityUserId_isset = YES;
  __userType = [userType retain_stub];
  __userType_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __firstName = [firstName retain_stub];
  __firstName_isset = YES;
  __lastName = [lastName retain_stub];
  __lastName_isset = YES;
  __emailAddress = [emailAddress retain_stub];
  __emailAddress_isset = YES;
  __gender = [gender retain_stub];
  __gender_isset = YES;
  __userAlias = [userAlias retain_stub];
  __userAlias_isset = YES;
  __avatar = [avatar retain_stub];
  __avatar_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"amityUserId"])
  {
    __amityUserId = [decoder decodeInt64ForKey: @"amityUserId"];
    __amityUserId_isset = YES;
  }
  if ([decoder containsValueForKey: @"userType"])
  {
    __userType = [[decoder decodeObjectForKey: @"userType"] retain_stub];
    __userType_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"firstName"])
  {
    __firstName = [[decoder decodeObjectForKey: @"firstName"] retain_stub];
    __firstName_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastName"])
  {
    __lastName = [[decoder decodeObjectForKey: @"lastName"] retain_stub];
    __lastName_isset = YES;
  }
  if ([decoder containsValueForKey: @"emailAddress"])
  {
    __emailAddress = [[decoder decodeObjectForKey: @"emailAddress"] retain_stub];
    __emailAddress_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [[decoder decodeObjectForKey: @"gender"] retain_stub];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"userAlias"])
  {
    __userAlias = [[decoder decodeObjectForKey: @"userAlias"] retain_stub];
    __userAlias_isset = YES;
  }
  if ([decoder containsValueForKey: @"avatar"])
  {
    __avatar = [[decoder decodeObjectForKey: @"avatar"] retain_stub];
    __avatar_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__amityUserId_isset)
  {
    [encoder encodeInt64: __amityUserId forKey: @"amityUserId"];
  }
  if (__userType_isset)
  {
    [encoder encodeObject: __userType forKey: @"userType"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__firstName_isset)
  {
    [encoder encodeObject: __firstName forKey: @"firstName"];
  }
  if (__lastName_isset)
  {
    [encoder encodeObject: __lastName forKey: @"lastName"];
  }
  if (__emailAddress_isset)
  {
    [encoder encodeObject: __emailAddress forKey: @"emailAddress"];
  }
  if (__gender_isset)
  {
    [encoder encodeObject: __gender forKey: @"gender"];
  }
  if (__userAlias_isset)
  {
    [encoder encodeObject: __userAlias forKey: @"userAlias"];
  }
  if (__avatar_isset)
  {
    [encoder encodeObject: __avatar forKey: @"avatar"];
  }
}

- (void) dealloc
{
  [__userType release_stub];
  [__username release_stub];
  [__firstName release_stub];
  [__lastName release_stub];
  [__emailAddress release_stub];
  [__gender release_stub];
  [__userAlias release_stub];
  [__avatar release_stub];
  [super dealloc_stub];
}

- (int64_t) amityUserId {
  return __amityUserId;
}

- (void) setAmityUserId: (int64_t) amityUserId {
  __amityUserId = amityUserId;
  __amityUserId_isset = YES;
}

- (BOOL) amityUserIdIsSet {
  return __amityUserId_isset;
}

- (void) unsetAmityUserId {
  __amityUserId_isset = NO;
}

- (NSString *) userType {
  return [[__userType retain_stub] autorelease_stub];
}

- (void) setUserType: (NSString *) userType {
  [userType retain_stub];
  [__userType release_stub];
  __userType = userType;
  __userType_isset = YES;
}

- (BOOL) userTypeIsSet {
  return __userType_isset;
}

- (void) unsetUserType {
  [__userType release_stub];
  __userType = nil;
  __userType_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) firstName {
  return [[__firstName retain_stub] autorelease_stub];
}

- (void) setFirstName: (NSString *) firstName {
  [firstName retain_stub];
  [__firstName release_stub];
  __firstName = firstName;
  __firstName_isset = YES;
}

- (BOOL) firstNameIsSet {
  return __firstName_isset;
}

- (void) unsetFirstName {
  [__firstName release_stub];
  __firstName = nil;
  __firstName_isset = NO;
}

- (NSString *) lastName {
  return [[__lastName retain_stub] autorelease_stub];
}

- (void) setLastName: (NSString *) lastName {
  [lastName retain_stub];
  [__lastName release_stub];
  __lastName = lastName;
  __lastName_isset = YES;
}

- (BOOL) lastNameIsSet {
  return __lastName_isset;
}

- (void) unsetLastName {
  [__lastName release_stub];
  __lastName = nil;
  __lastName_isset = NO;
}

- (NSString *) emailAddress {
  return [[__emailAddress retain_stub] autorelease_stub];
}

- (void) setEmailAddress: (NSString *) emailAddress {
  [emailAddress retain_stub];
  [__emailAddress release_stub];
  __emailAddress = emailAddress;
  __emailAddress_isset = YES;
}

- (BOOL) emailAddressIsSet {
  return __emailAddress_isset;
}

- (void) unsetEmailAddress {
  [__emailAddress release_stub];
  __emailAddress = nil;
  __emailAddress_isset = NO;
}

- (NSString *) gender {
  return [[__gender retain_stub] autorelease_stub];
}

- (void) setGender: (NSString *) gender {
  [gender retain_stub];
  [__gender release_stub];
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  [__gender release_stub];
  __gender = nil;
  __gender_isset = NO;
}

- (NSString *) userAlias {
  return [[__userAlias retain_stub] autorelease_stub];
}

- (void) setUserAlias: (NSString *) userAlias {
  [userAlias retain_stub];
  [__userAlias release_stub];
  __userAlias = userAlias;
  __userAlias_isset = YES;
}

- (BOOL) userAliasIsSet {
  return __userAlias_isset;
}

- (void) unsetUserAlias {
  [__userAlias release_stub];
  __userAlias = nil;
  __userAlias_isset = NO;
}

- (NSData *) avatar {
  return [[__avatar retain_stub] autorelease_stub];
}

- (void) setAvatar: (NSData *) avatar {
  [avatar retain_stub];
  [__avatar release_stub];
  __avatar = avatar;
  __avatar_isset = YES;
}

- (BOOL) avatarIsSet {
  return __avatar_isset;
}

- (void) unsetAvatar {
  [__avatar release_stub];
  __avatar = nil;
  __avatar_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAmityUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFirstName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setEmailAddress: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserAlias: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setAvatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AmityUserDto"];
  if (__amityUserId_isset) {
    [outProtocol writeFieldBeginWithName: @"amityUserId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __amityUserId];
    [outProtocol writeFieldEnd];
  }
  if (__userType_isset) {
    if (__userType != nil) {
      [outProtocol writeFieldBeginWithName: @"userType" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __userType];
      [outProtocol writeFieldEnd];
    }
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__firstName_isset) {
    if (__firstName != nil) {
      [outProtocol writeFieldBeginWithName: @"firstName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __firstName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastName_isset) {
    if (__lastName != nil) {
      [outProtocol writeFieldBeginWithName: @"lastName" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __lastName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__emailAddress_isset) {
    if (__emailAddress != nil) {
      [outProtocol writeFieldBeginWithName: @"emailAddress" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __emailAddress];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    if (__gender != nil) {
      [outProtocol writeFieldBeginWithName: @"gender" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __gender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userAlias_isset) {
    if (__userAlias != nil) {
      [outProtocol writeFieldBeginWithName: @"userAlias" type: TType_STRING fieldID: 8];
      [outProtocol writeString: __userAlias];
      [outProtocol writeFieldEnd];
    }
  }
  if (__avatar_isset) {
    if (__avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"avatar" type: TType_STRING fieldID: 9];
      [outProtocol writeBinary: __avatar];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__amityUserId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'amityUserId' is not set."];
  }
  if (!__userType_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'userType' is not set."];
  }
  if (!__emailAddress_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'emailAddress' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AmityUserDto("];
  [ms appendString: @"amityUserId:"];
  [ms appendFormat: @"%qi", __amityUserId];
  [ms appendString: @",userType:"];
  [ms appendFormat: @"\"%@\"", __userType];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",firstName:"];
  [ms appendFormat: @"\"%@\"", __firstName];
  [ms appendString: @",lastName:"];
  [ms appendFormat: @"\"%@\"", __lastName];
  [ms appendString: @",emailAddress:"];
  [ms appendFormat: @"\"%@\"", __emailAddress];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"\"%@\"", __gender];
  [ms appendString: @",userAlias:"];
  [ms appendFormat: @"\"%@\"", __userAlias];
  [ms appendString: @",avatar:"];
  [ms appendFormat: @"\"%@\"", __avatar];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginFacebookAccountResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode amityUserId: (int64_t) amityUserId authToken: (AmityToken *) authToken sessionToken: (AmityToken *) sessionToken amityUser: (AmityUserDto *) amityUser
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __amityUserId = amityUserId;
  __amityUserId_isset = YES;
  __authToken = [authToken retain_stub];
  __authToken_isset = YES;
  __sessionToken = [sessionToken retain_stub];
  __sessionToken_isset = YES;
  __amityUser = [amityUser retain_stub];
  __amityUser_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"amityUserId"])
  {
    __amityUserId = [decoder decodeInt64ForKey: @"amityUserId"];
    __amityUserId_isset = YES;
  }
  if ([decoder containsValueForKey: @"authToken"])
  {
    __authToken = [[decoder decodeObjectForKey: @"authToken"] retain_stub];
    __authToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionToken"])
  {
    __sessionToken = [[decoder decodeObjectForKey: @"sessionToken"] retain_stub];
    __sessionToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"amityUser"])
  {
    __amityUser = [[decoder decodeObjectForKey: @"amityUser"] retain_stub];
    __amityUser_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__amityUserId_isset)
  {
    [encoder encodeInt64: __amityUserId forKey: @"amityUserId"];
  }
  if (__authToken_isset)
  {
    [encoder encodeObject: __authToken forKey: @"authToken"];
  }
  if (__sessionToken_isset)
  {
    [encoder encodeObject: __sessionToken forKey: @"sessionToken"];
  }
  if (__amityUser_isset)
  {
    [encoder encodeObject: __amityUser forKey: @"amityUser"];
  }
}

- (void) dealloc
{
  [__authToken release_stub];
  [__sessionToken release_stub];
  [__amityUser release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (int64_t) amityUserId {
  return __amityUserId;
}

- (void) setAmityUserId: (int64_t) amityUserId {
  __amityUserId = amityUserId;
  __amityUserId_isset = YES;
}

- (BOOL) amityUserIdIsSet {
  return __amityUserId_isset;
}

- (void) unsetAmityUserId {
  __amityUserId_isset = NO;
}

- (AmityToken *) authToken {
  return [[__authToken retain_stub] autorelease_stub];
}

- (void) setAuthToken: (AmityToken *) authToken {
  [authToken retain_stub];
  [__authToken release_stub];
  __authToken = authToken;
  __authToken_isset = YES;
}

- (BOOL) authTokenIsSet {
  return __authToken_isset;
}

- (void) unsetAuthToken {
  [__authToken release_stub];
  __authToken = nil;
  __authToken_isset = NO;
}

- (AmityToken *) sessionToken {
  return [[__sessionToken retain_stub] autorelease_stub];
}

- (void) setSessionToken: (AmityToken *) sessionToken {
  [sessionToken retain_stub];
  [__sessionToken release_stub];
  __sessionToken = sessionToken;
  __sessionToken_isset = YES;
}

- (BOOL) sessionTokenIsSet {
  return __sessionToken_isset;
}

- (void) unsetSessionToken {
  [__sessionToken release_stub];
  __sessionToken = nil;
  __sessionToken_isset = NO;
}

- (AmityUserDto *) amityUser {
  return [[__amityUser retain_stub] autorelease_stub];
}

- (void) setAmityUser: (AmityUserDto *) amityUser {
  [amityUser retain_stub];
  [__amityUser release_stub];
  __amityUser = amityUser;
  __amityUser_isset = YES;
}

- (BOOL) amityUserIsSet {
  return __amityUser_isset;
}

- (void) unsetAmityUser {
  [__amityUser release_stub];
  __amityUser = nil;
  __amityUser_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAmityUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AmityToken *fieldValue = [[AmityToken alloc] init];
          [fieldValue read: inProtocol];
          [self setAuthToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRUCT) {
          AmityToken *fieldValue = [[AmityToken alloc] init];
          [fieldValue read: inProtocol];
          [self setSessionToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRUCT) {
          AmityUserDto *fieldValue = [[AmityUserDto alloc] init];
          [fieldValue read: inProtocol];
          [self setAmityUser: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginFacebookAccountResponse"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__amityUserId_isset) {
    [outProtocol writeFieldBeginWithName: @"amityUserId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __amityUserId];
    [outProtocol writeFieldEnd];
  }
  if (__authToken_isset) {
    if (__authToken != nil) {
      [outProtocol writeFieldBeginWithName: @"authToken" type: TType_STRUCT fieldID: 3];
      [__authToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sessionToken_isset) {
    if (__sessionToken != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionToken" type: TType_STRUCT fieldID: 4];
      [__sessionToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__amityUser_isset) {
    if (__amityUser != nil) {
      [outProtocol writeFieldBeginWithName: @"amityUser" type: TType_STRUCT fieldID: 5];
      [__amityUser write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginFacebookAccountResponse("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",amityUserId:"];
  [ms appendFormat: @"%qi", __amityUserId];
  [ms appendString: @",authToken:"];
  [ms appendFormat: @"%@", __authToken];
  [ms appendString: @",sessionToken:"];
  [ms appendFormat: @"%@", __sessionToken];
  [ms appendString: @",amityUser:"];
  [ms appendFormat: @"%@", __amityUser];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginAmityAccountRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAmityUserId: (int64_t) amityUserId authToken: (AmityToken *) authToken
{
  self = [super init];
  __amityUserId = amityUserId;
  __amityUserId_isset = YES;
  __authToken = [authToken retain_stub];
  __authToken_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"amityUserId"])
  {
    __amityUserId = [decoder decodeInt64ForKey: @"amityUserId"];
    __amityUserId_isset = YES;
  }
  if ([decoder containsValueForKey: @"authToken"])
  {
    __authToken = [[decoder decodeObjectForKey: @"authToken"] retain_stub];
    __authToken_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__amityUserId_isset)
  {
    [encoder encodeInt64: __amityUserId forKey: @"amityUserId"];
  }
  if (__authToken_isset)
  {
    [encoder encodeObject: __authToken forKey: @"authToken"];
  }
}

- (void) dealloc
{
  [__authToken release_stub];
  [super dealloc_stub];
}

- (int64_t) amityUserId {
  return __amityUserId;
}

- (void) setAmityUserId: (int64_t) amityUserId {
  __amityUserId = amityUserId;
  __amityUserId_isset = YES;
}

- (BOOL) amityUserIdIsSet {
  return __amityUserId_isset;
}

- (void) unsetAmityUserId {
  __amityUserId_isset = NO;
}

- (AmityToken *) authToken {
  return [[__authToken retain_stub] autorelease_stub];
}

- (void) setAuthToken: (AmityToken *) authToken {
  [authToken retain_stub];
  [__authToken release_stub];
  __authToken = authToken;
  __authToken_isset = YES;
}

- (BOOL) authTokenIsSet {
  return __authToken_isset;
}

- (void) unsetAuthToken {
  [__authToken release_stub];
  __authToken = nil;
  __authToken_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAmityUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AmityToken *fieldValue = [[AmityToken alloc] init];
          [fieldValue read: inProtocol];
          [self setAuthToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginAmityAccountRequest"];
  if (__amityUserId_isset) {
    [outProtocol writeFieldBeginWithName: @"amityUserId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __amityUserId];
    [outProtocol writeFieldEnd];
  }
  if (__authToken_isset) {
    if (__authToken != nil) {
      [outProtocol writeFieldBeginWithName: @"authToken" type: TType_STRUCT fieldID: 2];
      [__authToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__amityUserId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'amityUserId' is not set."];
  }
  if (!__authToken_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'authToken' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginAmityAccountRequest("];
  [ms appendString: @"amityUserId:"];
  [ms appendFormat: @"%qi", __amityUserId];
  [ms appendString: @",authToken:"];
  [ms appendFormat: @"%@", __authToken];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation LoginAmityAccountResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode sessionToken: (AmityToken *) sessionToken amityUser: (AmityUserDto *) amityUser
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __sessionToken = [sessionToken retain_stub];
  __sessionToken_isset = YES;
  __amityUser = [amityUser retain_stub];
  __amityUser_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"sessionToken"])
  {
    __sessionToken = [[decoder decodeObjectForKey: @"sessionToken"] retain_stub];
    __sessionToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"amityUser"])
  {
    __amityUser = [[decoder decodeObjectForKey: @"amityUser"] retain_stub];
    __amityUser_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__sessionToken_isset)
  {
    [encoder encodeObject: __sessionToken forKey: @"sessionToken"];
  }
  if (__amityUser_isset)
  {
    [encoder encodeObject: __amityUser forKey: @"amityUser"];
  }
}

- (void) dealloc
{
  [__sessionToken release_stub];
  [__amityUser release_stub];
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (AmityToken *) sessionToken {
  return [[__sessionToken retain_stub] autorelease_stub];
}

- (void) setSessionToken: (AmityToken *) sessionToken {
  [sessionToken retain_stub];
  [__sessionToken release_stub];
  __sessionToken = sessionToken;
  __sessionToken_isset = YES;
}

- (BOOL) sessionTokenIsSet {
  return __sessionToken_isset;
}

- (void) unsetSessionToken {
  [__sessionToken release_stub];
  __sessionToken = nil;
  __sessionToken_isset = NO;
}

- (AmityUserDto *) amityUser {
  return [[__amityUser retain_stub] autorelease_stub];
}

- (void) setAmityUser: (AmityUserDto *) amityUser {
  [amityUser retain_stub];
  [__amityUser release_stub];
  __amityUser = amityUser;
  __amityUser_isset = YES;
}

- (BOOL) amityUserIsSet {
  return __amityUser_isset;
}

- (void) unsetAmityUser {
  [__amityUser release_stub];
  __amityUser = nil;
  __amityUser_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          AmityToken *fieldValue = [[AmityToken alloc] init];
          [fieldValue read: inProtocol];
          [self setSessionToken: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          AmityUserDto *fieldValue = [[AmityUserDto alloc] init];
          [fieldValue read: inProtocol];
          [self setAmityUser: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginAmityAccountResponse"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__sessionToken_isset) {
    if (__sessionToken != nil) {
      [outProtocol writeFieldBeginWithName: @"sessionToken" type: TType_STRUCT fieldID: 2];
      [__sessionToken write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__amityUser_isset) {
    if (__amityUser != nil) {
      [outProtocol writeFieldBeginWithName: @"amityUser" type: TType_STRUCT fieldID: 3];
      [__amityUser write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginAmityAccountResponse("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",sessionToken:"];
  [ms appendFormat: @"%@", __sessionToken];
  [ms appendString: @",amityUser:"];
  [ms appendFormat: @"%@", __amityUser];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UpdateAmityAccountRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithAmityUserId: (int64_t) amityUserId username: (NSString *) username firstName: (NSString *) firstName lastName: (NSString *) lastName userAlias: (NSString *) userAlias avatar: (NSData *) avatar
{
  self = [super init];
  __amityUserId = amityUserId;
  __amityUserId_isset = YES;
  __username = [username retain_stub];
  __username_isset = YES;
  __firstName = [firstName retain_stub];
  __firstName_isset = YES;
  __lastName = [lastName retain_stub];
  __lastName_isset = YES;
  __userAlias = [userAlias retain_stub];
  __userAlias_isset = YES;
  __avatar = [avatar retain_stub];
  __avatar_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"amityUserId"])
  {
    __amityUserId = [decoder decodeInt64ForKey: @"amityUserId"];
    __amityUserId_isset = YES;
  }
  if ([decoder containsValueForKey: @"username"])
  {
    __username = [[decoder decodeObjectForKey: @"username"] retain_stub];
    __username_isset = YES;
  }
  if ([decoder containsValueForKey: @"firstName"])
  {
    __firstName = [[decoder decodeObjectForKey: @"firstName"] retain_stub];
    __firstName_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastName"])
  {
    __lastName = [[decoder decodeObjectForKey: @"lastName"] retain_stub];
    __lastName_isset = YES;
  }
  if ([decoder containsValueForKey: @"userAlias"])
  {
    __userAlias = [[decoder decodeObjectForKey: @"userAlias"] retain_stub];
    __userAlias_isset = YES;
  }
  if ([decoder containsValueForKey: @"avatar"])
  {
    __avatar = [[decoder decodeObjectForKey: @"avatar"] retain_stub];
    __avatar_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__amityUserId_isset)
  {
    [encoder encodeInt64: __amityUserId forKey: @"amityUserId"];
  }
  if (__username_isset)
  {
    [encoder encodeObject: __username forKey: @"username"];
  }
  if (__firstName_isset)
  {
    [encoder encodeObject: __firstName forKey: @"firstName"];
  }
  if (__lastName_isset)
  {
    [encoder encodeObject: __lastName forKey: @"lastName"];
  }
  if (__userAlias_isset)
  {
    [encoder encodeObject: __userAlias forKey: @"userAlias"];
  }
  if (__avatar_isset)
  {
    [encoder encodeObject: __avatar forKey: @"avatar"];
  }
}

- (void) dealloc
{
  [__username release_stub];
  [__firstName release_stub];
  [__lastName release_stub];
  [__userAlias release_stub];
  [__avatar release_stub];
  [super dealloc_stub];
}

- (int64_t) amityUserId {
  return __amityUserId;
}

- (void) setAmityUserId: (int64_t) amityUserId {
  __amityUserId = amityUserId;
  __amityUserId_isset = YES;
}

- (BOOL) amityUserIdIsSet {
  return __amityUserId_isset;
}

- (void) unsetAmityUserId {
  __amityUserId_isset = NO;
}

- (NSString *) username {
  return [[__username retain_stub] autorelease_stub];
}

- (void) setUsername: (NSString *) username {
  [username retain_stub];
  [__username release_stub];
  __username = username;
  __username_isset = YES;
}

- (BOOL) usernameIsSet {
  return __username_isset;
}

- (void) unsetUsername {
  [__username release_stub];
  __username = nil;
  __username_isset = NO;
}

- (NSString *) firstName {
  return [[__firstName retain_stub] autorelease_stub];
}

- (void) setFirstName: (NSString *) firstName {
  [firstName retain_stub];
  [__firstName release_stub];
  __firstName = firstName;
  __firstName_isset = YES;
}

- (BOOL) firstNameIsSet {
  return __firstName_isset;
}

- (void) unsetFirstName {
  [__firstName release_stub];
  __firstName = nil;
  __firstName_isset = NO;
}

- (NSString *) lastName {
  return [[__lastName retain_stub] autorelease_stub];
}

- (void) setLastName: (NSString *) lastName {
  [lastName retain_stub];
  [__lastName release_stub];
  __lastName = lastName;
  __lastName_isset = YES;
}

- (BOOL) lastNameIsSet {
  return __lastName_isset;
}

- (void) unsetLastName {
  [__lastName release_stub];
  __lastName = nil;
  __lastName_isset = NO;
}

- (NSString *) userAlias {
  return [[__userAlias retain_stub] autorelease_stub];
}

- (void) setUserAlias: (NSString *) userAlias {
  [userAlias retain_stub];
  [__userAlias release_stub];
  __userAlias = userAlias;
  __userAlias_isset = YES;
}

- (BOOL) userAliasIsSet {
  return __userAlias_isset;
}

- (void) unsetUserAlias {
  [__userAlias release_stub];
  __userAlias = nil;
  __userAlias_isset = NO;
}

- (NSData *) avatar {
  return [[__avatar retain_stub] autorelease_stub];
}

- (void) setAvatar: (NSData *) avatar {
  [avatar retain_stub];
  [__avatar release_stub];
  __avatar = avatar;
  __avatar_isset = YES;
}

- (BOOL) avatarIsSet {
  return __avatar_isset;
}

- (void) unsetAvatar {
  [__avatar release_stub];
  __avatar = nil;
  __avatar_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAmityUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUsername: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setFirstName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setLastName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setUserAlias: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSData * fieldValue = [inProtocol readBinary];
          [self setAvatar: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpdateAmityAccountRequest"];
  if (__amityUserId_isset) {
    [outProtocol writeFieldBeginWithName: @"amityUserId" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __amityUserId];
    [outProtocol writeFieldEnd];
  }
  if (__username_isset) {
    if (__username != nil) {
      [outProtocol writeFieldBeginWithName: @"username" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __username];
      [outProtocol writeFieldEnd];
    }
  }
  if (__firstName_isset) {
    if (__firstName != nil) {
      [outProtocol writeFieldBeginWithName: @"firstName" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __firstName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__lastName_isset) {
    if (__lastName != nil) {
      [outProtocol writeFieldBeginWithName: @"lastName" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __lastName];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userAlias_isset) {
    if (__userAlias != nil) {
      [outProtocol writeFieldBeginWithName: @"userAlias" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __userAlias];
      [outProtocol writeFieldEnd];
    }
  }
  if (__avatar_isset) {
    if (__avatar != nil) {
      [outProtocol writeFieldBeginWithName: @"avatar" type: TType_STRING fieldID: 6];
      [outProtocol writeBinary: __avatar];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__amityUserId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'amityUserId' is not set."];
  }
  if (!__firstName_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'firstName' is not set."];
  }
  if (!__lastName_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'lastName' is not set."];
  }
  if (!__userAlias_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'userAlias' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UpdateAmityAccountRequest("];
  [ms appendString: @"amityUserId:"];
  [ms appendFormat: @"%qi", __amityUserId];
  [ms appendString: @",username:"];
  [ms appendFormat: @"\"%@\"", __username];
  [ms appendString: @",firstName:"];
  [ms appendFormat: @"\"%@\"", __firstName];
  [ms appendString: @",lastName:"];
  [ms appendFormat: @"\"%@\"", __lastName];
  [ms appendString: @",userAlias:"];
  [ms appendFormat: @"\"%@\"", __userAlias];
  [ms appendString: @",avatar:"];
  [ms appendFormat: @"\"%@\"", __avatar];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UpdateAmityAccountResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpdateAmityAccountResponse"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UpdateAmityAccountResponse("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation authenticationConstants
+ (void) initialize {
}
@end

@interface loginFacebookAccount_args : NSObject <TBase, NSCoding> {
  LoginFacebookAccountRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) LoginFacebookAccountRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (LoginFacebookAccountRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginFacebookAccountRequest *) request;
- (void) setRequest: (LoginFacebookAccountRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation loginFacebookAccount_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (LoginFacebookAccountRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (LoginFacebookAccountRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (LoginFacebookAccountRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          LoginFacebookAccountRequest *fieldValue = [[LoginFacebookAccountRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"loginFacebookAccount_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"loginFacebookAccount_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface LoginFacebookAccount_result : NSObject <TBase, NSCoding> {
  LoginFacebookAccountResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginFacebookAccountResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (LoginFacebookAccountResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginFacebookAccountResponse *) success;
- (void) setSuccess: (LoginFacebookAccountResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation LoginFacebookAccount_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginFacebookAccountResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LoginFacebookAccountResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginFacebookAccountResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginFacebookAccountResponse *fieldValue = [[LoginFacebookAccountResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginFacebookAccount_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginFacebookAccount_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface loginAmityAccount_args : NSObject <TBase, NSCoding> {
  LoginAmityAccountRequest * __request;

  BOOL __request_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) LoginAmityAccountRequest * request;
#endif

- (id) init;
- (id) initWithRequest: (LoginAmityAccountRequest *) request;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginAmityAccountRequest *) request;
- (void) setRequest: (LoginAmityAccountRequest *) request;
#endif
- (BOOL) requestIsSet;

@end

@implementation loginAmityAccount_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (LoginAmityAccountRequest *) request
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [super dealloc_stub];
}

- (LoginAmityAccountRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (LoginAmityAccountRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          LoginAmityAccountRequest *fieldValue = [[LoginAmityAccountRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"loginAmityAccount_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"loginAmityAccount_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface LoginAmityAccount_result : NSObject <TBase, NSCoding> {
  LoginAmityAccountResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) LoginAmityAccountResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (LoginAmityAccountResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (LoginAmityAccountResponse *) success;
- (void) setSuccess: (LoginAmityAccountResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation LoginAmityAccount_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (LoginAmityAccountResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (LoginAmityAccountResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (LoginAmityAccountResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          LoginAmityAccountResponse *fieldValue = [[LoginAmityAccountResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"LoginAmityAccount_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"LoginAmityAccount_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface updateAmityAccount_args : NSObject <TBase, NSCoding> {
  UpdateAmityAccountRequest * __request;
  SessionCredentials * __credentials;

  BOOL __request_isset;
  BOOL __credentials_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) UpdateAmityAccountRequest * request;
@property (nonatomic, retain, getter=credentials, setter=setCredentials:) SessionCredentials * credentials;
#endif

- (id) init;
- (id) initWithRequest: (UpdateAmityAccountRequest *) request credentials: (SessionCredentials *) credentials;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UpdateAmityAccountRequest *) request;
- (void) setRequest: (UpdateAmityAccountRequest *) request;
#endif
- (BOOL) requestIsSet;

#if !__has_feature(objc_arc)
- (SessionCredentials *) credentials;
- (void) setCredentials: (SessionCredentials *) credentials;
#endif
- (BOOL) credentialsIsSet;

@end

@implementation updateAmityAccount_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (UpdateAmityAccountRequest *) request credentials: (SessionCredentials *) credentials
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  __credentials = [credentials retain_stub];
  __credentials_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  if ([decoder containsValueForKey: @"credentials"])
  {
    __credentials = [[decoder decodeObjectForKey: @"credentials"] retain_stub];
    __credentials_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
  if (__credentials_isset)
  {
    [encoder encodeObject: __credentials forKey: @"credentials"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [__credentials release_stub];
  [super dealloc_stub];
}

- (UpdateAmityAccountRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (UpdateAmityAccountRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (SessionCredentials *) credentials {
  return [[__credentials retain_stub] autorelease_stub];
}

- (void) setCredentials: (SessionCredentials *) credentials {
  [credentials retain_stub];
  [__credentials release_stub];
  __credentials = credentials;
  __credentials_isset = YES;
}

- (BOOL) credentialsIsSet {
  return __credentials_isset;
}

- (void) unsetCredentials {
  [__credentials release_stub];
  __credentials = nil;
  __credentials_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          UpdateAmityAccountRequest *fieldValue = [[UpdateAmityAccountRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          SessionCredentials *fieldValue = [[SessionCredentials alloc] init];
          [fieldValue read: inProtocol];
          [self setCredentials: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"updateAmityAccount_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__credentials_isset) {
    if (__credentials != nil) {
      [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 2];
      [__credentials write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"updateAmityAccount_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @",credentials:"];
  [ms appendFormat: @"%@", __credentials];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface UpdateAmityAccount_result : NSObject <TBase, NSCoding> {
  UpdateAmityAccountResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UpdateAmityAccountResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (UpdateAmityAccountResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (UpdateAmityAccountResponse *) success;
- (void) setSuccess: (UpdateAmityAccountResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation UpdateAmityAccount_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (UpdateAmityAccountResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (UpdateAmityAccountResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (UpdateAmityAccountResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UpdateAmityAccountResponse *fieldValue = [[UpdateAmityAccountResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UpdateAmityAccount_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UpdateAmityAccount_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthenticationThriftServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_loginFacebookAccount: (LoginFacebookAccountRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"loginFacebookAccount" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"loginFacebookAccount_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (LoginFacebookAccountResponse *) recv_loginFacebookAccount
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  LoginFacebookAccount_result * result = [[[LoginFacebookAccount_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"loginFacebookAccount failed: unknown result"];
}

- (LoginFacebookAccountResponse *) loginFacebookAccount: (LoginFacebookAccountRequest *) request
{
  [self send_loginFacebookAccount : request];
  return [self recv_loginFacebookAccount];
}

- (void) send_loginAmityAccount: (LoginAmityAccountRequest *) request
{
  [outProtocol writeMessageBeginWithName: @"loginAmityAccount" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"loginAmityAccount_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (LoginAmityAccountResponse *) recv_loginAmityAccount
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  LoginAmityAccount_result * result = [[[LoginAmityAccount_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"loginAmityAccount failed: unknown result"];
}

- (LoginAmityAccountResponse *) loginAmityAccount: (LoginAmityAccountRequest *) request
{
  [self send_loginAmityAccount : request];
  return [self recv_loginAmityAccount];
}

- (void) send_updateAmityAccount: (UpdateAmityAccountRequest *) request credentials: (SessionCredentials *) credentials
{
  [outProtocol writeMessageBeginWithName: @"updateAmityAccount" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"updateAmityAccount_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (credentials != nil)  {
    [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 2];
    [credentials write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (UpdateAmityAccountResponse *) recv_updateAmityAccount
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  UpdateAmityAccount_result * result = [[[UpdateAmityAccount_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"updateAmityAccount failed: unknown result"];
}

- (UpdateAmityAccountResponse *) updateAmityAccount: (UpdateAmityAccountRequest *) request credentials: (SessionCredentials *) credentials
{
  [self send_updateAmityAccount : request credentials: credentials];
  return [self recv_updateAmityAccount];
}

@end

@implementation AuthenticationThriftServiceProcessor

- (id) initWithAuthenticationThriftService: (id <AuthenticationThriftService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_loginFacebookAccount_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"loginFacebookAccount"];
  }
  {
    SEL s = @selector(process_loginAmityAccount_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"loginAmityAccount"];
  }
  {
    SEL s = @selector(process_updateAmityAccount_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"updateAmityAccount"];
  }
  return self;
}

- (id<AuthenticationThriftService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_loginFacebookAccount_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  loginFacebookAccount_args * args = [[loginFacebookAccount_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  LoginFacebookAccount_result * result = [[LoginFacebookAccount_result alloc] init];
  [result setSuccess: [mService loginFacebookAccount: [args request]]];
  [outProtocol writeMessageBeginWithName: @"loginFacebookAccount"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_loginAmityAccount_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  loginAmityAccount_args * args = [[loginAmityAccount_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  LoginAmityAccount_result * result = [[LoginAmityAccount_result alloc] init];
  [result setSuccess: [mService loginAmityAccount: [args request]]];
  [outProtocol writeMessageBeginWithName: @"loginAmityAccount"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) process_updateAmityAccount_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  updateAmityAccount_args * args = [[updateAmityAccount_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  UpdateAmityAccount_result * result = [[UpdateAmityAccount_result alloc] init];
  [result setSuccess: [mService updateAmityAccount: [args request] credentials: [args credentials]]];
  [outProtocol writeMessageBeginWithName: @"updateAmityAccount"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

