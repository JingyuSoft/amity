/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import "TProtocol.h"
#import "TApplicationException.h"
#import "TProtocolException.h"
#import "TProtocolUtil.h"
#import "TProcessor.h"
#import "TObjective-C.h"
#import "TBase.h"

#import "authentication.h"

#import "itinerary.h"

@implementation HelperItineraryDto

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithId: (int64_t) id userId: (int64_t) userId departureCityId: (int32_t) departureCityId departureDate: (NSString *) departureDate arrivalCityId: (int32_t) arrivalCityId arrivalDate: (NSString *) arrivalDate
{
  self = [super init];
  __id = id;
  __id_isset = YES;
  __userId = userId;
  __userId_isset = YES;
  __departureCityId = departureCityId;
  __departureCityId_isset = YES;
  __departureDate = [departureDate retain_stub];
  __departureDate_isset = YES;
  __arrivalCityId = arrivalCityId;
  __arrivalCityId_isset = YES;
  __arrivalDate = [arrivalDate retain_stub];
  __arrivalDate_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  if ([decoder containsValueForKey: @"userId"])
  {
    __userId = [decoder decodeInt64ForKey: @"userId"];
    __userId_isset = YES;
  }
  if ([decoder containsValueForKey: @"departureCityId"])
  {
    __departureCityId = [decoder decodeInt32ForKey: @"departureCityId"];
    __departureCityId_isset = YES;
  }
  if ([decoder containsValueForKey: @"departureDate"])
  {
    __departureDate = [[decoder decodeObjectForKey: @"departureDate"] retain_stub];
    __departureDate_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrivalCityId"])
  {
    __arrivalCityId = [decoder decodeInt32ForKey: @"arrivalCityId"];
    __arrivalCityId_isset = YES;
  }
  if ([decoder containsValueForKey: @"arrivalDate"])
  {
    __arrivalDate = [[decoder decodeObjectForKey: @"arrivalDate"] retain_stub];
    __arrivalDate_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
  if (__userId_isset)
  {
    [encoder encodeInt64: __userId forKey: @"userId"];
  }
  if (__departureCityId_isset)
  {
    [encoder encodeInt32: __departureCityId forKey: @"departureCityId"];
  }
  if (__departureDate_isset)
  {
    [encoder encodeObject: __departureDate forKey: @"departureDate"];
  }
  if (__arrivalCityId_isset)
  {
    [encoder encodeInt32: __arrivalCityId forKey: @"arrivalCityId"];
  }
  if (__arrivalDate_isset)
  {
    [encoder encodeObject: __arrivalDate forKey: @"arrivalDate"];
  }
}

- (void) dealloc
{
  [__departureDate release_stub];
  [__arrivalDate release_stub];
  [super dealloc_stub];
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (int64_t) userId {
  return __userId;
}

- (void) setUserId: (int64_t) userId {
  __userId = userId;
  __userId_isset = YES;
}

- (BOOL) userIdIsSet {
  return __userId_isset;
}

- (void) unsetUserId {
  __userId_isset = NO;
}

- (int32_t) departureCityId {
  return __departureCityId;
}

- (void) setDepartureCityId: (int32_t) departureCityId {
  __departureCityId = departureCityId;
  __departureCityId_isset = YES;
}

- (BOOL) departureCityIdIsSet {
  return __departureCityId_isset;
}

- (void) unsetDepartureCityId {
  __departureCityId_isset = NO;
}

- (NSString *) departureDate {
  return [[__departureDate retain_stub] autorelease_stub];
}

- (void) setDepartureDate: (NSString *) departureDate {
  [departureDate retain_stub];
  [__departureDate release_stub];
  __departureDate = departureDate;
  __departureDate_isset = YES;
}

- (BOOL) departureDateIsSet {
  return __departureDate_isset;
}

- (void) unsetDepartureDate {
  [__departureDate release_stub];
  __departureDate = nil;
  __departureDate_isset = NO;
}

- (int32_t) arrivalCityId {
  return __arrivalCityId;
}

- (void) setArrivalCityId: (int32_t) arrivalCityId {
  __arrivalCityId = arrivalCityId;
  __arrivalCityId_isset = YES;
}

- (BOOL) arrivalCityIdIsSet {
  return __arrivalCityId_isset;
}

- (void) unsetArrivalCityId {
  __arrivalCityId_isset = NO;
}

- (NSString *) arrivalDate {
  return [[__arrivalDate retain_stub] autorelease_stub];
}

- (void) setArrivalDate: (NSString *) arrivalDate {
  [arrivalDate retain_stub];
  [__arrivalDate release_stub];
  __arrivalDate = arrivalDate;
  __arrivalDate_isset = YES;
}

- (BOOL) arrivalDateIsSet {
  return __arrivalDate_isset;
}

- (void) unsetArrivalDate {
  [__arrivalDate release_stub];
  __arrivalDate = nil;
  __arrivalDate_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUserId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setDepartureCityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setDepartureDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setArrivalCityId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setArrivalDate: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"HelperItineraryDto"];
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  if (__userId_isset) {
    [outProtocol writeFieldBeginWithName: @"userId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __userId];
    [outProtocol writeFieldEnd];
  }
  if (__departureCityId_isset) {
    [outProtocol writeFieldBeginWithName: @"departureCityId" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __departureCityId];
    [outProtocol writeFieldEnd];
  }
  if (__departureDate_isset) {
    if (__departureDate != nil) {
      [outProtocol writeFieldBeginWithName: @"departureDate" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __departureDate];
      [outProtocol writeFieldEnd];
    }
  }
  if (__arrivalCityId_isset) {
    [outProtocol writeFieldBeginWithName: @"arrivalCityId" type: TType_I32 fieldID: 5];
    [outProtocol writeI32: __arrivalCityId];
    [outProtocol writeFieldEnd];
  }
  if (__arrivalDate_isset) {
    if (__arrivalDate != nil) {
      [outProtocol writeFieldBeginWithName: @"arrivalDate" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __arrivalDate];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__userId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'userId' is not set."];
  }
  if (!__departureCityId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'departureCityId' is not set."];
  }
  if (!__departureDate_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'departureDate' is not set."];
  }
  if (!__arrivalCityId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'arrivalCityId' is not set."];
  }
  if (!__arrivalDate_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'arrivalDate' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"HelperItineraryDto("];
  [ms appendString: @"id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @",userId:"];
  [ms appendFormat: @"%qi", __userId];
  [ms appendString: @",departureCityId:"];
  [ms appendFormat: @"%i", __departureCityId];
  [ms appendString: @",departureDate:"];
  [ms appendFormat: @"\"%@\"", __departureDate];
  [ms appendString: @",arrivalCityId:"];
  [ms appendFormat: @"%i", __arrivalCityId];
  [ms appendString: @",arrivalDate:"];
  [ms appendFormat: @"\"%@\"", __arrivalDate];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CreateHelperItineraryRequest

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithItinerary: (HelperItineraryDto *) itinerary
{
  self = [super init];
  __itinerary = [itinerary retain_stub];
  __itinerary_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"itinerary"])
  {
    __itinerary = [[decoder decodeObjectForKey: @"itinerary"] retain_stub];
    __itinerary_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__itinerary_isset)
  {
    [encoder encodeObject: __itinerary forKey: @"itinerary"];
  }
}

- (void) dealloc
{
  [__itinerary release_stub];
  [super dealloc_stub];
}

- (HelperItineraryDto *) itinerary {
  return [[__itinerary retain_stub] autorelease_stub];
}

- (void) setItinerary: (HelperItineraryDto *) itinerary {
  [itinerary retain_stub];
  [__itinerary release_stub];
  __itinerary = itinerary;
  __itinerary_isset = YES;
}

- (BOOL) itineraryIsSet {
  return __itinerary_isset;
}

- (void) unsetItinerary {
  [__itinerary release_stub];
  __itinerary = nil;
  __itinerary_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          HelperItineraryDto *fieldValue = [[HelperItineraryDto alloc] init];
          [fieldValue read: inProtocol];
          [self setItinerary: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateHelperItineraryRequest"];
  if (__itinerary_isset) {
    if (__itinerary != nil) {
      [outProtocol writeFieldBeginWithName: @"itinerary" type: TType_STRUCT fieldID: 1];
      [__itinerary write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateHelperItineraryRequest("];
  [ms appendString: @"itinerary:"];
  [ms appendFormat: @"%@", __itinerary];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation CreateHelperItineraryResponse

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithErrorCode: (int32_t) errorCode itineraryId: (int64_t) itineraryId
{
  self = [super init];
  __errorCode = errorCode;
  __errorCode_isset = YES;
  __itineraryId = itineraryId;
  __itineraryId_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"errorCode"])
  {
    __errorCode = [decoder decodeInt32ForKey: @"errorCode"];
    __errorCode_isset = YES;
  }
  if ([decoder containsValueForKey: @"itineraryId"])
  {
    __itineraryId = [decoder decodeInt64ForKey: @"itineraryId"];
    __itineraryId_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__errorCode_isset)
  {
    [encoder encodeInt32: __errorCode forKey: @"errorCode"];
  }
  if (__itineraryId_isset)
  {
    [encoder encodeInt64: __itineraryId forKey: @"itineraryId"];
  }
}

- (void) dealloc
{
  [super dealloc_stub];
}

- (int32_t) errorCode {
  return __errorCode;
}

- (void) setErrorCode: (int32_t) errorCode {
  __errorCode = errorCode;
  __errorCode_isset = YES;
}

- (BOOL) errorCodeIsSet {
  return __errorCode_isset;
}

- (void) unsetErrorCode {
  __errorCode_isset = NO;
}

- (int64_t) itineraryId {
  return __itineraryId;
}

- (void) setItineraryId: (int64_t) itineraryId {
  __itineraryId = itineraryId;
  __itineraryId_isset = YES;
}

- (BOOL) itineraryIdIsSet {
  return __itineraryId_isset;
}

- (void) unsetItineraryId {
  __itineraryId_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int32_t fieldValue = [inProtocol readI32];
          [self setErrorCode: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setItineraryId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateHelperItineraryResponse"];
  if (__errorCode_isset) {
    [outProtocol writeFieldBeginWithName: @"errorCode" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __errorCode];
    [outProtocol writeFieldEnd];
  }
  if (__itineraryId_isset) {
    [outProtocol writeFieldBeginWithName: @"itineraryId" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __itineraryId];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
  if (!__errorCode_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'errorCode' is not set."];
  }
  if (!__itineraryId_isset) {
    @throw [TProtocolException exceptionWithName: @"TProtocolException"
                               reason: @"Required field 'itineraryId' is not set."];
  }
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateHelperItineraryResponse("];
  [ms appendString: @"errorCode:"];
  [ms appendFormat: @"%i", __errorCode];
  [ms appendString: @",itineraryId:"];
  [ms appendFormat: @"%qi", __itineraryId];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation itineraryConstants
+ (void) initialize {
}
@end

@interface createItinerary_args : NSObject <TBase, NSCoding> {
  CreateHelperItineraryRequest * __request;
  SessionCredentials * __credentials;

  BOOL __request_isset;
  BOOL __credentials_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=request, setter=setRequest:) CreateHelperItineraryRequest * request;
@property (nonatomic, retain, getter=credentials, setter=setCredentials:) SessionCredentials * credentials;
#endif

- (id) init;
- (id) initWithRequest: (CreateHelperItineraryRequest *) request credentials: (SessionCredentials *) credentials;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (CreateHelperItineraryRequest *) request;
- (void) setRequest: (CreateHelperItineraryRequest *) request;
#endif
- (BOOL) requestIsSet;

#if !__has_feature(objc_arc)
- (SessionCredentials *) credentials;
- (void) setCredentials: (SessionCredentials *) credentials;
#endif
- (BOOL) credentialsIsSet;

@end

@implementation createItinerary_args

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithRequest: (CreateHelperItineraryRequest *) request credentials: (SessionCredentials *) credentials
{
  self = [super init];
  __request = [request retain_stub];
  __request_isset = YES;
  __credentials = [credentials retain_stub];
  __credentials_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"request"])
  {
    __request = [[decoder decodeObjectForKey: @"request"] retain_stub];
    __request_isset = YES;
  }
  if ([decoder containsValueForKey: @"credentials"])
  {
    __credentials = [[decoder decodeObjectForKey: @"credentials"] retain_stub];
    __credentials_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__request_isset)
  {
    [encoder encodeObject: __request forKey: @"request"];
  }
  if (__credentials_isset)
  {
    [encoder encodeObject: __credentials forKey: @"credentials"];
  }
}

- (void) dealloc
{
  [__request release_stub];
  [__credentials release_stub];
  [super dealloc_stub];
}

- (CreateHelperItineraryRequest *) request {
  return [[__request retain_stub] autorelease_stub];
}

- (void) setRequest: (CreateHelperItineraryRequest *) request {
  [request retain_stub];
  [__request release_stub];
  __request = request;
  __request_isset = YES;
}

- (BOOL) requestIsSet {
  return __request_isset;
}

- (void) unsetRequest {
  [__request release_stub];
  __request = nil;
  __request_isset = NO;
}

- (SessionCredentials *) credentials {
  return [[__credentials retain_stub] autorelease_stub];
}

- (void) setCredentials: (SessionCredentials *) credentials {
  [credentials retain_stub];
  [__credentials release_stub];
  __credentials = credentials;
  __credentials_isset = YES;
}

- (BOOL) credentialsIsSet {
  return __credentials_isset;
}

- (void) unsetCredentials {
  [__credentials release_stub];
  __credentials = nil;
  __credentials_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          CreateHelperItineraryRequest *fieldValue = [[CreateHelperItineraryRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setRequest: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          SessionCredentials *fieldValue = [[SessionCredentials alloc] init];
          [fieldValue read: inProtocol];
          [self setCredentials: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"createItinerary_args"];
  if (__request_isset) {
    if (__request != nil) {
      [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
      [__request write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__credentials_isset) {
    if (__credentials != nil) {
      [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 2];
      [__credentials write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"createItinerary_args("];
  [ms appendString: @"request:"];
  [ms appendFormat: @"%@", __request];
  [ms appendString: @",credentials:"];
  [ms appendFormat: @"%@", __credentials];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface CreateItinerary_result : NSObject <TBase, NSCoding> {
  CreateHelperItineraryResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) CreateHelperItineraryResponse * success;
#endif

- (id) init;
- (id) initWithSuccess: (CreateHelperItineraryResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (void) validate;

#if !__has_feature(objc_arc)
- (CreateHelperItineraryResponse *) success;
- (void) setSuccess: (CreateHelperItineraryResponse *) success;
#endif
- (BOOL) successIsSet;

@end

@implementation CreateItinerary_result

- (id) init
{
  self = [super init];
#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
#endif
  return self;
}

- (id) initWithSuccess: (CreateHelperItineraryResponse *) success
{
  self = [super init];
  __success = [success retain_stub];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain_stub];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release_stub];
  [super dealloc_stub];
}

- (CreateHelperItineraryResponse *) success {
  return [[__success retain_stub] autorelease_stub];
}

- (void) setSuccess: (CreateHelperItineraryResponse *) success {
  [success retain_stub];
  [__success release_stub];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release_stub];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          CreateHelperItineraryResponse *fieldValue = [[CreateHelperItineraryResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release_stub];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"CreateItinerary_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (void) validate {
  // check for required fields
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"CreateItinerary_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation ItineraryThriftServiceClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  self = [super init];
  inProtocol = [anInProtocol retain_stub];
  outProtocol = [anOutProtocol retain_stub];
  return self;
}

- (void) dealloc
{
  [inProtocol release_stub];
  [outProtocol release_stub];
  [super dealloc_stub];
}

- (void) send_createItinerary: (CreateHelperItineraryRequest *) request credentials: (SessionCredentials *) credentials
{
  [outProtocol writeMessageBeginWithName: @"createItinerary" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"createItinerary_args"];
  if (request != nil)  {
    [outProtocol writeFieldBeginWithName: @"request" type: TType_STRUCT fieldID: 1];
    [request write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (credentials != nil)  {
    [outProtocol writeFieldBeginWithName: @"credentials" type: TType_STRUCT fieldID: 2];
    [credentials write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (CreateHelperItineraryResponse *) recv_createItinerary
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  CreateItinerary_result * result = [[[CreateItinerary_result alloc] init] autorelease_stub];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"createItinerary failed: unknown result"];
}

- (CreateHelperItineraryResponse *) createItinerary: (CreateHelperItineraryRequest *) request credentials: (SessionCredentials *) credentials
{
  [self send_createItinerary : request credentials: credentials];
  return [self recv_createItinerary];
}

@end

@implementation ItineraryThriftServiceProcessor

- (id) initWithItineraryThriftService: (id <ItineraryThriftService>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain_stub];
  mMethodMap = [[NSMutableDictionary dictionary] retain_stub];
  {
    SEL s = @selector(process_createItinerary_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"createItinerary"];
  }
  return self;
}

- (id<ItineraryThriftService>) service
{
  return [[mService retain_stub] autorelease_stub];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_createItinerary_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  createItinerary_args * args = [[createItinerary_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  CreateItinerary_result * result = [[CreateItinerary_result alloc] init];
  [result setSuccess: [mService createItinerary: [args request] credentials: [args credentials]]];
  [outProtocol writeMessageBeginWithName: @"createItinerary"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release_stub];
  [args release_stub];
}

- (void) dealloc
{
  [mService release_stub];
  [mMethodMap release_stub];
  [super dealloc_stub];
}

@end

